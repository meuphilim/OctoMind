#!/bin/bash

echo "üîç Diagnosticando o script OctoMind..."

# Verificar se estamos na pasta correta
if [ ! -f "package.json" ]; then
    echo "‚ùå Erro: Execute este script na pasta raiz do projeto OctoMind"
    exit 1
fi

echo "üìã Verificando configura√ß√£o atual..."

# Verificar Node.js
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
echo "‚úÖ Node.js: $(node -v)"

# Verificar se fetch est√° dispon√≠vel
echo "üîç Testando fetch nativo..."
node -e "console.log('Fetch dispon√≠vel:', typeof fetch !== 'undefined')"

# Verificar package.json
echo "üìù Verificando package.json..."
if grep -q '"type": "module"' package.json; then
    echo "‚úÖ M√≥dulos ES configurados"
else
    echo "‚ùå M√≥dulos ES N√ÉO configurados"
fi

# Verificar depend√™ncias
echo "üì¶ Verificando depend√™ncias..."
if [ -d "node_modules" ]; then
    echo "‚úÖ node_modules existe"
    if [ -d "node_modules/slugify" ]; then
        echo "‚úÖ slugify instalado"
    else
        echo "‚ùå slugify N√ÉO instalado"
    fi
else
    echo "‚ùå node_modules N√ÉO existe"
fi

# Verificar estrutura de arquivos
echo "üìÅ Verificando estrutura..."
echo "Scripts:"
ls -la scripts/ 2>/dev/null || echo "‚ùå Pasta scripts n√£o encontrada"
echo "Docs:"
ls -la docs/ 2>/dev/null || echo "‚ùå Pasta docs n√£o encontrada"

# Testar sintaxe do script
echo "üß™ Testando sintaxe do script..."
node --check scripts/update_catalog.js
if [ $? -eq 0 ]; then
    echo "‚úÖ Sintaxe do script OK"
else
    echo "‚ùå Erro de sintaxe no script"
    exit 1
fi

# Executar com logs detalhados
echo "üöÄ Executando script com logs detalhados..."
echo "Comando: node scripts/update_catalog.js"
echo "Sa√≠da:"
echo "----------------------------------------"

# Executar e capturar tanto stdout quanto stderr
node scripts/update_catalog.js 2>&1

EXIT_CODE=$?
echo "----------------------------------------"
echo "C√≥digo de sa√≠da: $EXIT_CODE"

if [ $EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Script executou sem erros"
else
    echo "‚ùå Script falhou com c√≥digo $EXIT_CODE"
fi

# Verificar se arquivos foram modificados
echo "üìù Verificando mudan√ßas nos arquivos..."
if [[ -n "$(git status --porcelain)" ]]; then
    echo "‚úÖ Arquivos foram modificados:"
    git status --short
else
    echo "‚ö†Ô∏è Nenhum arquivo foi modificado"
fi

# Verificar cache
if [ -f ".cache/repo-cache.json" ]; then
    echo "‚úÖ Cache criado:"
    ls -la .cache/
else
    echo "‚ö†Ô∏è Cache n√£o foi criado"
fi
