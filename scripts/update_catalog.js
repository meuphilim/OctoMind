/**
 * OctoMind - Script de Atualiza√ß√£o de Cat√°logo
 * Vers√£o: 2.1.0
 */

import fs from "fs/promises"
import path from "path"
import { fileURLToPath } from "url"
import slugify from "slugify"

// Configura√ß√µes
const __dirname = path.dirname(fileURLToPath(import.meta.url))
const ROOT_DIR = path.join(__dirname, "..")
const README_PATH = path.join(ROOT_DIR, "README.md")
const DOCS_DIR = path.join(ROOT_DIR, "docs")
const MODEL_PATH = path.join(DOCS_DIR, "modelo.md")
const CACHE_DIR = path.join(ROOT_DIR, ".cache")
const CACHE_FILE = path.join(CACHE_DIR, "repo-cache.json")

// Configura√ß√£o da API do GitHub
const GITHUB_API = "https://api.github.com"
const GITHUB_TOKEN = process.env.GH_TOKEN
const GITHUB_USERNAME = process.env.GITHUB_REPOSITORY?.split("/")[0] || "meuphilim"
const CURRENT_REPO_NAME = process.env.GITHUB_REPOSITORY?.split("/")[1] || "OctoMind"

// Headers para requisi√ß√µes √† API do GitHub
const headers = {
  Accept: "application/vnd.github.v3+json",
  "User-Agent": "OctoMind-Portfolio-Bot/2.1.0",
  ...(GITHUB_TOKEN && { Authorization: `Bearer ${GITHUB_TOKEN}` }),
}

// Emojis para linguagens de programa√ß√£o
const languageEmojis = {
  JavaScript: "üü®",
  TypeScript: "üî∑",
  Python: "üêç",
  Java: "‚òï",
  "C#": "üü™",
  PHP: "üêò",
  Ruby: "üíé",
  Go: "üîµ",
  Rust: "ü¶Ä",
  Swift: "üî∂",
  Kotlin: "üü†",
  HTML: "üåê",
  CSS: "üé®",
  Shell: "üêö",
  "C++": "üî¥",
  C: "‚ö™",
  Dart: "üéØ",
  Vue: "üü¢",
  React: "‚öõÔ∏è",
  Angular: "üÖ∞Ô∏è",
  default: "üìÑ",
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  try {
    console.log(`üöÄ Iniciando OctoMind para @${GITHUB_USERNAME}...`)

    // Verificar se o Node.js suporta fetch nativo
    if (typeof fetch === "undefined") {
      console.error("‚ùå Este script requer Node.js 18+ com fetch nativo")
      process.exit(1)
    }

    // Criar diret√≥rios necess√°rios
    await createDirectories()

    // Verificar cache e buscar reposit√≥rios
    const repos = await fetchRepositories()
    console.log(`üìö Encontrados ${repos.length} reposit√≥rios.`)

    // Filtrar reposit√≥rios
    const filteredRepos = filterRepositories(repos)
    console.log(`üîç Processando ${filteredRepos.length} reposit√≥rios.`)

    // Atualizar README e gerar documenta√ß√£o em paralelo
    await Promise.all([updateReadme(filteredRepos), generateDocumentation(filteredRepos)])

    console.log("‚úÖ OctoMind conclu√≠do com sucesso!")
  } catch (error) {
    console.error("‚ùå Erro:", error.message)
    console.error("Stack trace:", error.stack)
    process.exit(1)
  }
}

/**
 * Cria os diret√≥rios necess√°rios
 */
async function createDirectories() {
  try {
    await Promise.all([fs.mkdir(DOCS_DIR, { recursive: true }), fs.mkdir(CACHE_DIR, { recursive: true })])
    console.log("üìÅ Diret√≥rios criados com sucesso")
  } catch (error) {
    console.error("‚ùå Erro ao criar diret√≥rios:", error.message)
    throw error
  }
}

/**
 * Filtra reposit√≥rios
 */
function filterRepositories(repos) {
  return repos.filter(
    (repo) => repo.name.toLowerCase() !== CURRENT_REPO_NAME.toLowerCase() && !repo.archived && !repo.fork,
  )
}

/**
 * Busca reposit√≥rios com suporte a cache
 */
async function fetchRepositories() {
  try {
    // Verificar se existe cache e se est√° atualizado (menos de 1 hora)
    let useCache = false
    try {
      const cacheStats = await fs.stat(CACHE_FILE)
      const cacheAge = Date.now() - cacheStats.mtimeMs
      useCache = cacheAge < 3600000 // 1 hora em milissegundos

      if (useCache) {
        console.log("üìã Cache encontrado e ainda v√°lido")
      }
    } catch (error) {
      console.log("üìã Cache n√£o encontrado ou inv√°lido, buscando dados frescos...")
    }

    // Usar cache se dispon√≠vel e recente
    if (useCache) {
      console.log("üìã Usando dados em cache...")
      const cacheData = await fs.readFile(CACHE_FILE, "utf8")
      return JSON.parse(cacheData)
    }

    // Buscar dados da API
    const repos = await fetchAllRepositories()

    // Salvar no cache
    await fs.writeFile(CACHE_FILE, JSON.stringify(repos, null, 2))
    console.log("üíæ Dados salvos no cache")

    return repos
  } catch (error) {
    console.error("‚ö†Ô∏è Erro ao buscar reposit√≥rios:", error.message)

    // Tentar usar cache mesmo que esteja desatualizado em caso de erro
    try {
      const cacheData = await fs.readFile(CACHE_FILE, "utf8")
      console.log("üîÑ Usando cache de backup devido a erro na API.")
      return JSON.parse(cacheData)
    } catch (cacheError) {
      console.error("‚ùå N√£o foi poss√≠vel usar cache de backup:", cacheError.message)
      // Se n√£o houver cache, propaga o erro original
      throw error
    }
  }
}

/**
 * Busca todos os reposit√≥rios do usu√°rio com pagina√ß√£o
 */
async function fetchAllRepositories() {
  let page = 1
  let allRepos = []
  let hasMorePages = true
  const perPage = 100 // M√°ximo permitido pela API

  while (hasMorePages) {
    const url = `${GITHUB_API}/users/${GITHUB_USERNAME}/repos?per_page=${perPage}&page=${page}&sort=updated&type=owner`
    console.log(`üì• Buscando p√°gina ${page}...`)

    try {
      const response = await fetch(url, { headers })

      // Verificar limites de rate da API
      const rateLimit = response.headers.get("x-ratelimit-remaining")
      const rateLimitReset = response.headers.get("x-ratelimit-reset")

      if (rateLimit) {
        console.log(`üìä Rate limit restante: ${rateLimit}`)
        if (Number.parseInt(rateLimit) < 5) {
          const resetTime = new Date(Number.parseInt(rateLimitReset) * 1000)
          console.warn(`‚ö†Ô∏è Aten√ß√£o: Apenas ${rateLimit} requisi√ß√µes restantes. Reset em: ${resetTime.toLocaleString()}`)
        }
      }

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Falha ao buscar reposit√≥rios: ${response.status} ${response.statusText} - ${errorText}`)
      }

      const repos = await response.json()

      if (repos.length === 0) {
        hasMorePages = false
        console.log("üìÑ Nenhum reposit√≥rio adicional encontrado")
      } else {
        allRepos = [...allRepos, ...repos]
        console.log(`üìö Encontrados ${repos.length} reposit√≥rios na p√°gina ${page}`)
        page++

        // Verificar se provavelmente h√° mais p√°ginas
        hasMorePages = repos.length === perPage
      }
    } catch (error) {
      console.error(`‚ùå Erro ao buscar p√°gina ${page}:`, error.message)
      // Interromper a pagina√ß√£o em caso de erro
      hasMorePages = false
    }
  }

  console.log(`üìä Total de reposit√≥rios encontrados: ${allRepos.length}`)
  return allRepos
}

/**
 * Atualiza o README.md
 */
async function updateReadme(repos) {
  try {
    console.log("üìù Atualizando README.md...")

    let readmeContent = await fs.readFile(README_PATH, "utf8")
    const oldContent = readmeContent

    const tableContent = generateRepositoryTable(repos)

    readmeContent = readmeContent.replace(
      /<!-- OCTOMIND_PROJECTS_START -->[\s\S]*?<!-- OCTOMIND_PROJECTS_END -->/,
      `<!-- OCTOMIND_PROJECTS_START -->\n${tableContent}\n<!-- OCTOMIND_PROJECTS_END -->`,
    )

    const repoCount = repos.length
    const languages = new Set(repos.map((repo) => repo.language).filter(Boolean))
    const languageCount = languages.size

    readmeContent = readmeContent
      .replace(/\{\{ REPO_COUNT \}\}/g, repoCount.toString())
      .replace(/\{\{ LANGUAGE_COUNT \}\}/g, languageCount.toString())

    // S√≥ escrever se houver mudan√ßas
    if (readmeContent !== oldContent) {
      await fs.writeFile(README_PATH, readmeContent)
      console.log("‚úÖ README.md atualizado com sucesso.")
    } else {
      console.log("üìù README.md sem altera√ß√µes.")
    }
  } catch (error) {
    console.error("‚ùå Erro ao atualizar README:", error.message)
    throw error
  }
}

/**
 * Gera a tabela de reposit√≥rios
 */
function generateRepositoryTable(repos) {
  if (repos.length === 0) {
    return "*Nenhum projeto encontrado.*"
  }

  const table = [
    "| Projeto | Descri√ß√£o | Linguagem | √öltima Atualiza√ß√£o | T√≥picos |",
    "|:--------|:----------|:----------|:-------------------|:--------|",
  ]

  for (const repo of repos) {
    // Sanitizar dados para evitar inje√ß√£o de markdown
    const name = sanitizeMarkdown(repo.name)
    const description = repo.description ? sanitizeMarkdown(repo.description) : "*Sem descri√ß√£o*"

    const lang = repo.language || "N/A"
    const languageDisplay = `${languageEmojis[lang] || languageEmojis.default} ${sanitizeMarkdown(lang)}`

    // Formatar data no formato brasileiro
    const updatedAt = new Date(repo.updated_at).toLocaleDateString("pt-BR")

    const topics =
      repo.topics && repo.topics.length > 0
        ? repo.topics.map((topic) => `\`${sanitizeMarkdown(topic)}\``).join(" ")
        : "*Nenhum*"

    const docFileName = `${slugify(name, { lower: true, strict: true })}.md`
    const docLink = `[üìÑ](./docs/${docFileName})`

    table.push(
      `| [${name}](${repo.html_url}) ${docLink} | ${description} | ${languageDisplay} | ${updatedAt} | ${topics} |`,
    )
  }

  return table.join("\n")
}

/**
 * Sanitiza strings para evitar inje√ß√£o de markdown
 */
function sanitizeMarkdown(text) {
  if (!text) return ""
  return text.replace(/\|/g, "\\|").replace(/\[/g, "\\[").replace(/\]/g, "\\]")
}

/**
 * Gera documenta√ß√£o para cada reposit√≥rio
 */
async function generateDocumentation(repos) {
  try {
    console.log("üìã Gerando documenta√ß√£o...")

    const modelContent = await fs.readFile(MODEL_PATH, "utf8")

    // Processar reposit√≥rios em paralelo para melhor performance
    const results = await Promise.allSettled(
      repos.map(async (repo) => {
        const repoSlug = slugify(repo.name, { lower: true, strict: true })
        const docPath = path.join(DOCS_DIR, `${repoSlug}.md`)

        // Verificar se o arquivo j√° existe e se precisa ser atualizado
        let existingContent = ""
        try {
          existingContent = await fs.readFile(docPath, "utf8")
        } catch (error) {
          // Arquivo n√£o existe, ser√° criado
        }

        let docContent = modelContent
          .replace(/\{\{ PROJECT_NAME \}\}/g, sanitizeMarkdown(repo.name))
          .replace(
            /\{\{ PROJECT_DESCRIPTION \}\}/g,
            repo.description ? sanitizeMarkdown(repo.description) : "*Sem descri√ß√£o dispon√≠vel.*",
          )
          .replace(
            /\{\{ PROJECT_LANGUAGE \}\}/g,
            repo.language ? sanitizeMarkdown(repo.language) : "*N√£o especificado*",
          )
          .replace(/\{\{ PROJECT_URL \}\}/g, repo.html_url)
          .replace(
            /\{\{ PROJECT_TOPICS \}\}/g,
            repo.topics && repo.topics.length > 0
              ? repo.topics.map((topic) => `\`${sanitizeMarkdown(topic)}\``).join(", ")
              : "*Nenhum t√≥pico definido*",
          )

        docContent = docContent.replace(
          /\{\{ PROJECT_DEMO_LINK_PLACEHOLDER \}\}/g,
          repo.homepage ? `- [üåê Demo](${repo.homepage})` : "",
        )

        // S√≥ escrever se o conte√∫do for diferente
        if (docContent !== existingContent) {
          await fs.writeFile(docPath, docContent)
          console.log(`üìÑ Documenta√ß√£o atualizada para ${repo.name}`)
          return { status: "updated", repo: repo.name }
        } else {
          return { status: "unchanged", repo: repo.name }
        }
      }),
    )

    const successful = results.filter((r) => r.status === "fulfilled").length
    const failed = results.filter((r) => r.status === "rejected").length

    console.log(`‚úÖ Documenta√ß√£o processada: ${successful} sucessos, ${failed} falhas`)

    if (failed > 0) {
      console.log("‚ùå Falhas na documenta√ß√£o:")
      results.forEach((result, index) => {
        if (result.status === "rejected") {
          console.log(`  - ${repos[index].name}: ${result.reason.message}`)
        }
      })
    }
  } catch (error) {
    console.error("‚ùå Erro ao gerar documenta√ß√£o:", error.message)
    throw error
  }
}

// Executar o script
main()
